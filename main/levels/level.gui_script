function init(self)
	msg.post('.', 'acquire_input_focus')
	self.level = 1
	self.powerup = 'none'
	self.powerup_box_nodes = {}
	self.next_button_exists = true
	self.paused = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash('health_change') then
		gui.set_text(gui.get_node('health'), 'Health: ' .. message.health)
		gui.set(gui.get_node('health_bar'), 'size.x', message.health * 2)
		
	elseif message_id == hash('powerup') then
		if message.powerup ~= self.powerup then
			self.powerup = message.powerup
			gui.set_text(gui.get_node('powerup'), 'Powerup: ' .. message.powerup)

			-- Reset box nodes for new powerups
			for i in pairs(self.powerup_box_nodes) do
				gui.delete_node(self.powerup_box_nodes[i])
				self.powerup_box_nodes[i] = nil
			end
		end
			
		local ammo_x_start = 130
		local ammo_y_start = 555
		for i = 1, message.ammo, 1 do
			if not self.powerup_box_nodes[i] then
				local new_node = gui.new_box_node(vmath.vector3(i * 50 + ammo_x_start, ammo_y_start, 1), vmath.vector3(40, 40, 1))
				if message.powerup == 'freeze' then
					gui.set_texture(new_node, 'iceball')
				elseif message.powerup == 'fire' then
					gui.set_texture(new_node, 'fireball')
				end
				self.powerup_box_nodes[i] = new_node
			end
		end
		
	elseif message_id == hash('powerup_used') then
		gui.delete_node(self.powerup_box_nodes[#self.powerup_box_nodes])
		self.powerup_box_nodes[#self.powerup_box_nodes] = nil
		if not self.powerup_box_nodes[1] then
			gui.set_text(gui.get_node('powerup'), 'Powerup: none')
		end

	elseif message_id == hash('level_completed') then
		local finished_modal = gui.get_node('finished_modal')
		gui.animate(finished_modal, 'position.y', 320, gui.EASING_LINEAR, .5)

	elseif message_id == hash('game_over') then
		local game_over_modal = gui.get_node('game_over_modal')
		gui.animate(game_over_modal, 'position.y', 320, gui.EASING_LINEAR, .5)

	elseif message_id == hash('level_loaded') then
		self.level = message.level
		gui.set_text(gui.get_node('level_indicator'), 'Level ' .. self.level)
		if not message.next_level_exists then
			local next_btn = gui.get_node('next_level/button_box')
			gui.delete_node(next_btn)
			self.next_button_exists = false

			local position = vmath.vector3(0, -10, 0)
			local all_levels_completed_text = gui.new_text_node(position, 'All Levels Completed!')
			gui.set_parent(all_levels_completed_text, gui.get_node('finished_modal'))
			gui.set_color(all_levels_completed_text, vmath.vector3(0, 0, 0))
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash('touch') then
		local game_over_retry_btn = gui.get_node('game_over_retry/button_box')
		local pause_retry_btn = gui.get_node('pause_retry/button_box')
		
		local game_over_exit_btn = gui.get_node('game_over_exit/button_box')
		local pause_exit_btn = gui.get_node('pause_exit/button_box')
		
		if gui.pick_node(game_over_retry_btn, action.x, action.y)
		or gui.pick_node(pause_retry_btn, action.x, action.y) then
			msg.post('main:/loader#loader', 'retry')
			
		elseif gui.pick_node(game_over_exit_btn, action.x, action.y)
		or gui.pick_node(pause_exit_btn, action.x, action.y) then
			msg.post('main:/guis#level_select', 'show_level_select')
			msg.post("main:/loader#loader", "unload_level")
		end
		
		if self.next_button_exists then
			local next_btn = gui.get_node('next_level/button_box')
			if gui.pick_node(next_btn, action.x, action.y) then
				msg.post('main:/loader#loader', 'next_level')
			end
		end
		
	elseif action_id == hash('Menu') then
		if action.released then
			local pause_modal = gui.get_node('pause_modal')
			self.paused = not self.paused
			if self.paused then
				gui.animate(pause_modal, 'position.y', 320, gui.EASING_LINEAR, .5)
				-- Setting the time_step factor to 0 will prevent gui animations as well
				-- Delay the pause by the time it takes to animate the pause menu into view
				timer.delay(.5, false, function ()
					msg.post('main:/loader#proxy_level_' .. self.level, 'set_time_step', { factor = 0, mode = 1 })
				end)
			else
				msg.post('main:/loader#proxy_level_' .. self.level, 'set_time_step', { factor = 1, mode = 1 })
				gui.animate(pause_modal, 'position.y', 872, gui.EASING_LINEAR, .5)
			end
		end
	end
end
