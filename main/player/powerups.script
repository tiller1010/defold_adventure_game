function init(self)
	self.on_cooldown = false
	self.powerup_ammo = 0
	self.powerup_max_ammo  = {
		freeze = 3,
		fire = 2
	}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("powerup") then
		local new_ammo = self.powerup_ammo + message.ammo
		if message.powerup ~= self.powerup then
			new_ammo = message.ammo
			self.powerup = message.powerup
		end
		
		local max_ammo = self.powerup_max_ammo[message.powerup]
		if new_ammo >= max_ammo then
			new_ammo = max_ammo
		end
		self.powerup_ammo = new_ammo
		
		msg.post('/gui#level', 'powerup', { powerup = message.powerup, ammo = new_ammo })
	end
end

function table_contains(tbl, x)
	for _, v in pairs(tbl) do
		if v == x then
			return true
		end
	end
	return false
end

function on_input(self, action_id, action)
	local direction_integer = go.get('#player', 'direction_integer')
	local in_minecart = go.get('#player', 'in_minecart')
	local has_projectile_powerup = table_contains(
		{
			'freeze',
			'fire',
		},
		self.powerup
	)

	if action_id == hash("Attack") and not self.on_cooldown then
		if in_minecart then
			if has_projectile_powerup
			and self.powerup_ammo > 0
			then
				local projectile_factory = '#fireball_factory'
				if self.powerup == 'freeze' then
					projectile_factory = '#iceball_factory'
				end
				
				local dir = vmath.vector3(0, -1, 0)
				if direction_integer == 1 then
					dir = vmath.vector3(0, 1, 0)
				elseif direction_integer == 2 then
					dir = vmath.vector3(1, 0, 0)
				elseif direction_integer == 4 then
					dir = vmath.vector3(-1, 0, 0)
				end

				local position = go.get_position() - vmath.vector3(0, 20, 0)

				local angle = math.atan2(dir.y, dir.x)
				local rotation = vmath.quat_rotation_z(angle)
				local props = { dir = dir }
				factory.create(projectile_factory, position, rotation, props)
				self.on_cooldown = true
				self.powerup_ammo = self.powerup_ammo - 1
				timer.delay(.5, false, function ()
					self.on_cooldown = false
				end)
				
				msg.post('/gui#level', 'powerup_used')
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
