local player_helper = require('main/player/player_helpers')

-- Used for go.property, which has limited allowed types
local function get_direction_integer(direction_string)
  if direction_string == 'north' then
    return 1
  elseif direction_string == 'east' then
    return 2
  elseif direction_string == 'south' then
    return 3
  else
    return 4
  end
end
go.property('direction_integer', 3)

go.property('input', vmath.vector3())
go.property('in_minecart', true)

function init(self)
  msg.post("#", "acquire_input_focus")
  self.direction = 'south'

  self.minecart_can_go_north = false
  self.minecart_can_go_south = false
  self.minecart_can_go_east = false
  self.minecart_can_go_west = false

  enter_minecart(self)

  self.alive = true
  self.health = 100
end

function update(self, dt)
  if vmath.length_sqr(self.input) > 1 then
    self.input = vmath.normalize(self.input)
  end

  local function player_move(compass_direction)
    local position = go.get_position()
    local player_speed = self.in_minecart and 300 or 200
    local movement = self.input * player_speed * dt
    if not self.animating_walk or self.direction ~= compass_direction then

      local spriteHash = '#sprite'
      local animation_prefix = 'walk_'

      if self.in_minecart then
        spriteHash = '#player_in_minecart'
        animation_prefix = 'minecart_'
      end

      sprite.play_flipbook(spriteHash, animation_prefix .. compass_direction)
      self.animating_walk = true
    end

    if self.in_minecart then
      if self['minecart_can_go_' .. compass_direction] then
        go.set_position(go.get_position(), 'minecart')
        go.set_position(position + movement)
      end
    else
      go.set_position(position + movement)
    end

    self.direction = compass_direction
    self.direction_integer = get_direction_integer(compass_direction)
    self.input = vmath.vector3()
  end

  if self.input.x > 0 then
    player_move("east")
  elseif self.input.x < 0 then
    player_move("west")
  elseif self.input.y > 0 then
    player_move("north")
  elseif self.input.y < 0 then
    player_move("south")
  end

end

function on_input(self, action_id, action)
  if not self.alive then return end
  
  if self.in_minecart and (self.input.x ~= 0 or self.input.y ~= 0) then
    return
  end

  local function stop_walk_animation()
    sprite.play_flipbook("#sprite", "idle_" .. self.direction)
    self.animating_walk = false
  end

  -- Idle animation in direction
  if action.released 
    and (action_id == hash("Right")
    or action_id == hash("Left")
    or action_id == hash("Up")
    or action_id == hash("Down")
  ) then
      stop_walk_animation()

  -- Add velocity in direction
  elseif action_id == hash("Right") then
    self.input.x = 1

  elseif action_id == hash("Left") then
    self.input.x = -1

  elseif action_id == hash("Up") then
    self.input.y = 1

  elseif action_id == hash("Down") then
    self.input.y = -1
  end

  local function attack_animation()
    if not self.attack_on_cooldown then
      sprite.play_flipbook("#sprite", "attack_" .. self.direction)
      self.attack_on_cooldown = true

      -- Wait for attack animation, 4 frames / 12 fps = .33
      timer.delay(.33, false, function ()
        sprite.play_flipbook("#sprite", "idle_" .. self.direction)
        self.animating_walk = false -- Allow for walking animation to take over
        self.attack_on_cooldown = false
      end)

    end
  end

  -- Attack animations
  if action_id == hash("Attack") then
    attack_animation()
  end

end

function enter_minecart(self)
  self.in_minecart = true

  if self.closest_track_position then
    -- Move player to center of nearest track
    go.set_position(self.closest_track_position)
  end

  sprite.play_flipbook("#player_in_minecart", 'minecart_' .. self.direction)

  -- Set player default sprite to transparent, show player minecart sprite
  sprite.set_constant('#sprite', 'tint', vmath.vector4(1, 1, 1, 0))
  sprite.set_constant('#player_in_minecart', 'tint', vmath.vector4(1, 1, 1, 1))
  self.current_sprite = "#player_in_minecart"

  -- Minecart game object
  local minecart_url = player_helper.get_minecart_url(go)
  sprite.set_constant(minecart_url .. '#minecart_sprite', 'tint', vmath.vector4(1, 1, 1, 0))
end

function exit_minecart(self)
  self.in_minecart = false
  sprite.play_flipbook("#sprite", "idle_" .. self.direction)

  -- Set player default sprite to visible, hide player minecart sprite
  sprite.set_constant('#sprite', 'tint', vmath.vector4(1, 1, 1, 1))
  sprite.set_constant('#player_in_minecart', 'tint', vmath.vector4(1, 1, 1, 0))
  self.current_sprite = "#sprite"

  -- Minecart game object
  local minecart_url = player_helper.get_minecart_url(go)
  sprite.set_constant(minecart_url .. '#minecart_sprite', 'tint', vmath.vector4(1, 1, 1, 1))
end

function on_message(self, message_id, message, sender)
  if message.other_group == hash("track_trigger") then
    -- Save center of closest track. Will be recentered once the cart is entered
    local track_position = go.get_position(message.other_id)
    local center_of_track = vmath.vector3(math.floor(track_position.x) + 10, math.floor(track_position.y) + 40, 1)
    local distance_to_center_of_track = vmath.length(center_of_track - go.get_position())

    local previous_closest_track_distance = math.huge
    if self.closest_track then
      local previous_track_position = go.get_position(self.closest_track)
      local previous_center_of_track = vmath.vector3(math.floor(previous_track_position.x) + 10, math.floor(previous_track_position.y) + 40, 1)
      previous_closest_track_distance = vmath.length(previous_center_of_track - go.get_position())
    end

    if not self.closest_track or distance_to_center_of_track < previous_closest_track_distance then
      self.closest_track = message.other_id
      self.closest_track_position = center_of_track
    end
    -- End find center of closest track
    
    local can_go_in_direction = message_id == hash("collision_response")
    local track_in_direction = sender.fragment

    if hash(track_in_direction) == hash("track_trigger_north") then
      self.minecart_can_go_north = can_go_in_direction
    elseif hash(track_in_direction) == hash("track_trigger_south") then
      self.minecart_can_go_south = can_go_in_direction
    elseif hash(track_in_direction) == hash("track_trigger_east") then
      self.minecart_can_go_east = can_go_in_direction
    elseif hash(track_in_direction) == hash("track_trigger_west") then
      self.minecart_can_go_west = can_go_in_direction
    end
 
  elseif message_id == hash("interact_with_minecart") and self.alive then
    if not self.in_minecart then
      enter_minecart(self)
    else
      -- Not sure if this functionality is desired yet
      -- exit_minecart(self)
    end

  elseif message_id == hash("damage") and self.alive and not self.invincible then
    local new_health = self.health - message.damage
    if new_health < 0 then
      new_health = 0
    end
    self.health = new_health
    msg.post('/gui#level', 'health_change', { health = self.health })

     -- Flash red every other tenth of a second for 1 second
    for i = 0, 1, .1 do
      timer.delay(i, false, function ()
        if i * 10 % 2 == 0 then
          -- Flash red
          sprite.set_constant(self.current_sprite, 'tint', vmath.vector4(2, 1, 1, 1))
        else
          -- Normal tint
          sprite.set_constant(self.current_sprite, 'tint', vmath.vector4(1, 1, 1, 1))
        end
      end)
    end

    -- Grace period invincibility
    self.invincible = true
    timer.delay(2, false, function ()
      self.invincible = false
      sprite.set_constant(self.current_sprite, 'tint', vmath.vector4(1, 1, 1,1 ))
    end)
    
    if self.health < 1 then
      self.alive = false
      exit_minecart(self)
      sprite.play_flipbook("#sprite", "death_west")
    end

  elseif message_id == hash('level_completed') then
    self.invincible = true
    -- Disable movement, maybe move this to a new property
    self.alive = false
  end
end

