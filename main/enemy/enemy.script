local player_helper = require('main/player/player_helpers')

-- Configurable properties to enable/disable directions per enemy
go.property('goes_north', true)
go.property('goes_south', true)
go.property('goes_east', true)
go.property('goes_west', true)

function init(self)
	self.movement_vector = vmath.vector3()

	-- Properties to check if track exists in a direction
	-- Will always be false if "goes_" equivalent is false
	self.can_go_north = false
	self.can_go_south = false
	self.can_go_east = false
	self.can_go_west = false

	self.north_tracks = {}
	self.south_tracks = {}
	self.east_tracks = {}
	self.west_tracks = {}

	self.frozen = false
	self.alive = true
	self.health = 20
end

function final(self)
end

function update(self, dt)
end

function fixed_update(self, dt)
	local function enemy_move(compass_direction)
		local position = go.get_position()
		local enemy_speed = 200
		local movement = self.movement_vector * enemy_speed * dt
		if self.direction ~= compass_direction then

			local spriteHash = '#sprite'
			local animation_prefix = 'move_'

			sprite.play_flipbook(spriteHash, animation_prefix .. compass_direction)
		end

		go.set_position(position + movement)

		self.direction = compass_direction
	end

	if self.alive and not self.frozen then
		if self.movement_vector.x > 0 then
			enemy_move("east")
		elseif self.movement_vector.x < 0 then
			enemy_move("west")
		elseif self.movement_vector.y > 0 then
			enemy_move("north")
		elseif self.movement_vector.y < 0 then
			enemy_move("south")
		end
	end
end

function table_has_value(table)
	for _, _ in pairs(table) do
		return true
	end
	return false
end

function table_value_count(table)
	local count = 0
	for _, _ in pairs(table) do
		count = count + 1
	end
	return count
end

function update_movement_properties(self, message_id, message, sender)
	local can_go_in_direction = message_id == hash("collision_response")
	local track_in_direction = sender.fragment

	if message_id == hash("trigger_response") then
		for _, direction in pairs({ "north", "south", "east", "west" }) do
			if self['goes_' .. direction] then
				-- Prevent enemy from immediately turning around after taking a turn,
				-- since the opposite direction would then become available after traversing a single tile
				local already_moving_along_axis = false
				if ((direction == "east" or direction == "west") and self.going_horizontal)
				or ((direction == "north" or direction == "south") and self.going_vertical) then
					already_moving_along_axis = true
				end

				if hash(track_in_direction) == hash("track_trigger_" .. direction) then
					if message.enter then
						if not table_has_value(self[direction .. "_tracks"])
						and not already_moving_along_axis then
							self.new_directions = true
						end
						self[direction .. "_tracks"][message.other_id] = true
						self["can_go_" .. direction] = true
					else
						if table_value_count(self[direction .. "_tracks"]) == 1 then
							self.new_directions = true
						end
						self[direction .. "_tracks"][message.other_id] = nil
						if not table_has_value(self[direction .. "_tracks"]) then
							self["can_go_" .. direction] = false
						end
					end
				end
			end
		end
	end

	if self.new_directions then
		self.new_directions = false

		self.going_horizontal = self.can_go_east or self.can_go_west
		self.going_vertical = self.can_go_north or self.can_go_south

		if self.going_horizontal and self.going_vertical then
			if math.random(2) == 1 then
				self.going_horizontal = false
			else
				self.going_vertical = false
			end
		end

		if self.going_horizontal then
			if self.can_go_east and self.can_go_west then
				self.movement_vector.x = math.random(2) == 1 and 1 or -1
			elseif self.can_go_east then
				self.movement_vector.x = 1
			elseif self.can_go_west then
				self.movement_vector.x = -1
			end
		else
			self.movement_vector.x = 0
		end

		if self.going_vertical then
			if self.can_go_north and self.can_go_south then
				self.movement_vector.y = math.random(2) == 1 and 1 or -1
			elseif self.can_go_north then
				self.movement_vector.y = 1
			elseif self.can_go_south then
				self.movement_vector.y = -1
			end
		else
			self.movement_vector.y = 0
		end

	end
end

function on_message(self, message_id, message, sender)
	if message.other_group == hash("track_trigger") then
		update_movement_properties(self, message_id, message, sender)
		
	elseif message.other_group == hash("player") and self.alive and not self.frozen then
		local player_url = player_helper.get_player_url(go)
		msg.post(player_url, "damage", { damage = 25 })
		
	elseif message_id == hash('freeze') then
		self.frozen = true
		-- Set blue tint
		sprite.set_constant('#sprite', 'tint', vmath.vector4(1, 1, 2, 1))
		timer.delay(3, false, function () 
			self.frozen = false
			-- Remove blue tint
			sprite.set_constant('#sprite', 'tint', vmath.vector4(1, 1, 1, 1))
		end)
		
	elseif message_id == hash("fire") and self.alive then
		local new_health = self.health - message.damage
		if new_health < 0 then
			new_health = 0
		end
		self.health = new_health
		
		-- Flash red every other tenth of a second for 1 second
		for i = 0, 1, .1 do
			timer.delay(i, false, function ()
				if i * 10 % 2 == 0 then
					-- Flash red
					sprite.set_constant('#sprite', 'tint', vmath.vector4(2, 1, 1, 1))
				else
					-- Normal tint
					sprite.set_constant('#sprite', 'tint', vmath.vector4(1, 1, 1, 1))
				end
			end)
		end

		if self.health < 1 then
			self.alive = false
			sprite.play_flipbook("#sprite", "explosion_death")
		end
	end
	
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
